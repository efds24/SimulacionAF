============Automata.java============
import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;

public class Automata {
    private static String[] estados;
    private static ArrayList<String> estadosFinales;
    private static String[] alfabeto;
    private static HashMap<String, String[]> tablaTransiciones;
    private static ArrayList<String> estadoActual;

    /* Función que divide el fichero y guarda cada linea en su lugar
     * correspondiente
     * archivo: El archivo donde esta la descripcion del automata
    */
    public void leerFichero(File archivo){
        String aux;
        tablaTransiciones = new HashMap<>();
        estadoActual = new ArrayList<>();
        estadosFinales = new ArrayList<>();
        String[] estFin;
        Scanner obj;
        
        try {
            obj = new Scanner(archivo);
            
            //Leemos los estados
            estados = obj.nextLine().trim().split(" ");
            
            //Leemos los estados finales
            estFin = obj.nextLine().trim().split(" ");
            
            //Metemos los estados finales en un ArrayList
            for(int i = 1; i<estFin.length; i++){
                estadosFinales.add(estFin[i].trim());
            }
            
            //Leemos el alfabeto
            alfabeto = obj.nextLine().trim().split(" ");

            //Saltamos la linea de titulo de la tabla
            obj.nextLine();
            
            //Leemos la linea de transiciones
            for(int i = 0; i<estados.length-1; i++){
                //Dividimos la linea leida por el simbolo # y la metemos en un array
                String[] linea = obj.nextLine().trim().split("#");
                
                //Dividimos cada uno de los elementos del array
                for(int j = 1; j < linea.length; j++){
                    //Establecemos la clave del HashMap que almacenara la tabla
                    //Clave "Estado,simbolo"
                    aux = estados[i+1] + ","+ alfabeto[j];
                    //Le quitamos los espacios que rodean a los elementos
                    linea[j-1] = linea[j-1].trim();
                    //Dividimos con el caracter espacio
                    String[] celdas = linea[j-1].split(" ");
                    
                    //Lo añadimos al HashMap
                    tablaTransiciones.put(aux, celdas);
                }
                
                //Añadimos la cadena vacía
                aux = estados[i+1] + ",lambda";
                linea[linea.length-1] = linea[linea.length-1].trim();
                String[] celdas = linea[linea.length-1].split(" ");
                tablaTransiciones.put(aux, celdas);
            }

            //En estado actual solo estara el estado inicial(el primero) y su clausura
            setEstadoInicial();
            
            obj.close();
            
        } catch (FileNotFoundException ex) {
            System.out.println("FileNotFoundException: "+ex.getMessage());
        }

    }

    /* Función para actualizar estadoActual al estado al que pasa el programa
     * con un simbolo introducido
     * c: Simbolo que provoca la transicion
    */
    public void estadoSiguiente(char c) {
        String aux;
        ArrayList<String> lista = new ArrayList<>();
        
        //Analizamos que pasa con cada estado que esta en estado actual
        for (String estado : estadoActual){
            //Se busca la clave en la tabla
            aux = estado + "," + c;
            String[] transiciones = tablaTransiciones.get(aux);
            
            //Para cada el elemento del array resultado
            for (String transicion : transiciones) {
                //Si hay algun estado que aun no se haya añadido
                if (!transicion.equals("") && !lista.contains(transicion)) {
                    //Se añade a la lista
                    lista.add(transicion);
                }
            }
        }

        //Se vacia estadoAtual y se añade todo lo que hay en lista
        estadoActual.clear();
        estadoActual.addAll(lista);

        //Falta añadir la clausura de todos los estados que hay ahora en estadoActual
        for(String estado : estadoActual){
            for(String claus :clausura(estado)){
                if(!lista.contains(claus)){
                    lista.add(claus);
                }
            }
        }

        estadoActual = lista;
    }

    /* Función para calcular la clausura de un estado
     * estado: el estado del que se quiere calcular la clausura
     * return: ArrayList que contiene la clausura de estado
    */
    public ArrayList<String> clausura(String estado){
        String key, e;
        ArrayList<String> claus = new ArrayList<>();
        int contador = 1;

        //Añadimos el propio estado
        claus.add(estado);
        
        //Mientras haya elementos en la clausura, en principio hay 1.
        for(int i = 0; i<contador; i++){
            //Se busca ese elemento en la tabla con la transicion por la cadena vacía
            key = claus.get(i) + ",lambda";
            String[] s = tablaTransiciones.get(key);
            
            //Se añade a la clausura cada uno de los que se conecten a el por la cadena vacia
            if(s!=null&&!s[0].equals("")) {
                for (String item : s) {
                    e = item;
                    if (!claus.contains(e)) {
                        claus.add(e);
                        contador++;
                    }
                }
            }
        }

        return claus;
    }

    /*
     * Función para imprimir el/los estado/s actual/es
     * return: cadena que se quiere imprimir
    */
    public String imprimirEstadoActual(){
        ArrayList<String> estFin = new ArrayList<>();
        
        //Se imprimen el array de los estados actuales
        String s = "Estado actual: " + estadoActual +"\n";
        
        //Se comprueba se alguno de ellos es final
        for(String estado : estadoActual){
            if(estadosFinales.contains(estado))
                estFin.add(estado);
        }

        //Si hay alguno final se indica diciendo cuales
        if(!estFin.isEmpty()){
            s+="Es final ya que: " + estFin + " son finales.\n";
        }
        return s;
    }

    /*
     * Función que comprueba si un caracter esta en el alfabeto
     * c: caracter a comprobar
     * return: true esta en el alfabeto
     *         false no esta en el alfabeto
    */
    public boolean enAlfabeto(char c){
        for (int i = 1; i< alfabeto.length; i++){
            if(alfabeto[i].equals(Character.toString(c))){
                return true;
            }
        }
        return false;
    }

    /*
     * Función que establece el estado inicial
    */
    public void setEstadoInicial(){
        //Se vacia todo lo que haya en estado inicial
        estadoActual.clear();
        
        //Se añade el primer estado de la lista
        estadoActual.add(estados[1]);
        
        //Se calcula la clausura de ese primer estado
        for(String claus :clausura(estados[1])) {
            if (!estadoActual.contains(claus)) {
                estadoActual.add(claus);
            }
        }
    }
}

============Pantalla.java============

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JFrame;

public class Pantalla extends JFrame {

    private File file;
    private static Automata a;
    
    public Pantalla() {
        file = null;
        initComponents();
        archivoText.setEditable(false);
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        descripcion = new javax.swing.JLabel();
        archivoText = new javax.swing.JTextField();
        seleccionarBoton = new javax.swing.JButton();
        confirmarBoton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Practica 2 - Elena Fernandez del Sel");

        descripcion.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        descripcion.setText("Selecciona el archivo con la descripción del autómata");

        seleccionarBoton.setText("...");
        seleccionarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarBotonActionPerformed(evt);
            }
        });

        confirmarBoton.setText("Seleccionar archivo");
        confirmarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmarBotonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(descripcion)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(confirmarBoton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(archivoText, javax.swing.GroupLayout.PREFERRED_SIZE, 624, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(seleccionarBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(138, 138, 138))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(descripcion)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(archivoText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seleccionarBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(confirmarBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(383, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void seleccionarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarBotonActionPerformed
        //Se crea el selector de archivo
        JFileChooser fileChooser = new JFileChooser();
        //El selector de archivos se abre en el directorio donde se ejecuta el programa
        fileChooser.setCurrentDirectory(new File("."));
        //Se abre el fileChooser
        int result = fileChooser.showOpenDialog(null);
        //Cuando se seleccione un archivo se almacena en file y se pone la ruta en archivoText
        if(result == JFileChooser.APPROVE_OPTION){
            file = fileChooser.getSelectedFile();
            archivoText.setText(String.valueOf(file));
        }
    }//GEN-LAST:event_seleccionarBotonActionPerformed

    private void confirmarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmarBotonActionPerformed
        //Si ya se ha seleccionado un archivo
        if(file != null){
            //Se lee el fichero y se divide correctamente
            a.leerFichero(file);
            //Se crea la ventana principal
            Principal principal = new Principal(a);
            //Se deja de ver esta
            this.setVisible(false);
        }
    }//GEN-LAST:event_confirmarBotonActionPerformed

     public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //Se crea una nueva instancia de la clase con las funciones basicas del programa
                a = new Automata();
                //Se crea la ventana del seleccion de archivos
                Pantalla interfaz = new Pantalla();
                interfaz.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                interfaz.pack();
                interfaz.setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField archivoText;
    private javax.swing.JButton confirmarBoton;
    private javax.swing.JLabel descripcion;
    private javax.swing.JButton seleccionarBoton;
    // End of variables declaration//GEN-END:variables

}

============Principal.java============

import javax.swing.JFrame;

public class Principal extends JFrame {
    
    private String cadena;
    private Automata a;
    
    public Principal(Automata a) {
        this.a = a;
        initComponents();
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.pack();
        this.setVisible(true);
        resultadoArea.setEditable(false);
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cadenaText = new javax.swing.JTextField();
        cadenaBoton = new javax.swing.JButton();
        cadenaLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultadoArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Practica 2 - Elena Fernandez del Sel");

        cadenaBoton.setText("Empezar");
        cadenaBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadenaBotonActionPerformed(evt);
            }
        });

        cadenaLabel.setText("Introduce una cadena:");

        resultadoArea.setColumns(20);
        resultadoArea.setRows(5);
        jScrollPane1.setViewportView(resultadoArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(59, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cadenaLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cadenaText, javax.swing.GroupLayout.PREFERRED_SIZE, 670, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cadenaBoton))
                    .addComponent(jScrollPane1))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(cadenaLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cadenaText)
                    .addComponent(cadenaBoton, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE))
                .addGap(51, 51, 51)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cadenaBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadenaBotonActionPerformed
        //Se vacia todo lo que haya en el area de texto
        resultadoArea.setText("");
        //Se reinicia al estado inicial
        a.setEstadoInicial();
        resultadoArea.append("Estado inicial:\n");
        resultadoArea.append(a.imprimirEstadoActual()+"\n");
        
        //Se lee la cadena del cuadro de texto
        cadena = cadenaText.getText().trim();
        
        //Se divide la cadena en caracteres
        for(int i = 0; i<cadena.length(); i++) {
            //Que caracter se esta analizando
            resultadoArea.append("Caracter " + (i+1) + ": " + cadena.charAt(i)+"\n");
            
            //Si el caracter esta en el alfabeto
            if(a.enAlfabeto(cadena.charAt(i))) {
                //Se actualiza el estado actual
                a.estadoSiguiente(cadena.charAt(i));
                //Se imprime el estado actual
                resultadoArea.append(a.imprimirEstadoActual()+"\n");
            } else {
                //Si no esta en el alfabeto este caracter se omite
                resultadoArea.append("\nNo esta en el alfabeto, lo saltamos\n");
            }
        }
    }//GEN-LAST:event_cadenaBotonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cadenaBoton;
    private javax.swing.JLabel cadenaLabel;
    private javax.swing.JTextField cadenaText;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea resultadoArea;
    // End of variables declaration//GEN-END:variables
}
